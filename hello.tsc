/**
hello world!
**/

/**
parentheses are data.
**/
Message(
    x int = 0;
    y int = 0;
);

/**
post type declaration.
strong type inference.
**/
msg Message;
ms Message(1,2);
m = msg;
m = (3,4);

/**
curly brackets are code.
declarations outside of class definition.
forward declaration
**/
Message.swap;
Message.sum int {
    return x+y;
}
Message.diff {
    return x-y;
}

/**
pointers
**/
// msg is a pointer to a Message
msg^ Message;
// msg has value nullptr
msg = nullptr;
m12 = Message(1,2);
m34 = m12.offset(2,2);
// mp is a pointer to a message, mp has value address of m12
mp = ^m12;
// contents of mp (m12) are replaced with m34.
mp^ = m34;

/**
anonymous classes
**/
(x int).negate {
    return -x;
}

/**
syntactic sugar
**/
Message.offset(a int, b int) {
    x += a;
    y += b;
}
(m^ Message, a int, b int).offset {
    m^.x += a;
    m^.y += b;
}

/**
templates
**/
Passage:T(
    x T = 0;
    y T = 0;
);
Passage.offset:T(a T, b T) {
    x += a;
    y += b;
}

/**
type definitions
**/
type MessagePtr^ Message;
type Msg MessagePtr^;

/**
type qualifiers
follows template pattern.
**/
x int:32
y int:16
z int:64u

/**
implied operator: string concatenation
can be applied to any class.
**/
comma_space = ", "
cr = "\n"
s = "hello" comma_space "world!" cr

/**
automatic type conversion
**/
x int 10;
s string = x;

/**
explicit type conversion
**/
Message.string {
    s = "x=" x ", y=" y;
    return "(" s ")";
}
msg = Message(1,2);
s string = msg;

/**
header file:
**/
Message(
    x int = 0;
    y int = 0;
);
Message.clear;

/**
source file:
**/
include "message.h"
// private function
Message.set(a int, b int) {
    x = a;
    y = b;
}
Message.clear {
    set(0,0);
}

/**
extending classes.
**/
// header file:
Message(
    x int = 0;
    y int = 0;
);
// implementation file
include "message.h"
Message+=(
    // private fields
    y int = 0;
    z int = 0;
);
// consumer file
include "message.h"
msg Message;
z = msg.z; // error, private field.

/**
if else switch loops etc.
**/
foo(x int) {
    y int;
    if x==0 {
        y = 1;
    } else if x==1 {
        y = 0;
    } else {
        y = -1;
    }
    return y;
}
bar (x int) {
    y int;
    switch x {
        y = 99
    } 3 {
        y = 0
    } 4 {
        y = 1
    } <0 {
        y = -1
    };
}

/**
exceptions are nigh invisible
**/
foo {
    err try;
    x = first;
    y = second(x);
    z = third(x,y);
    w = fourth(x,y,z);
    if err {
        std.err err;
        throw;
    }
}
first {
    if pi==3 {
        throw "pi=" pi;
    }
    return pi;
}
// possible output to std error:
srcfile:203:first: pi=3
srcfile:192:foo:
