

wanted features:

- editor with built in debugger.
lovely gui.

- name first. optional type second.
the type is strongly inferred when not explicit.

x Int;
y Int = x;
z = x + y;

- data classes are defined by parantheses.
may use comma separated format or semicolon format.
may be named or anonymous.
class definitions end in semicolons.

Foo(
    x Int;
    y Int;
);
Bar(x Int, y Int);

- function definitions have an anonymous class followed
by code in curly brackets.
function definitions do not end in a semicolon.

hello_world() {
    s = "Hello, World!";
}

hello(name String) {
    s = "Hello, " + name + "!";
}

- function declarations may be attached to a named class.
function declarations must have an explicit return type.

Foo.sum() Int;

- function definitions may be attached to a named class.
the return type may be explicit or inferred.

Foo.sum Int {
    return x + y;
}

Foo.div {
    return x / y;
}

- class function definitions and declarations may be aggregated.

Foo (
    x Int;
    y Int;
)
.sum() Int {
    return x + y;
}
.div() {
    reutrn x / y;
}
.other()
.same();

- data class names use mixed capital case.
ie they start with a capital letter, may use lower case letters,
may not use underscores.
functions and variables always start with a lower case letter.
otherwise these would be ambiguous.
functions and variables that start with underscores are reserved for the
compiler and standard libraries.

Foo(x Int);
foo(x Int);

- function names may use lower mixed case or underscores.

fooBarYo(x Int, y Int);
foo_bar_yo(x Int, y Int);

- variable names may use lower mixed case or underscores.

fooBarYo String;
foo_bar_yo Int;

- named class fields should end in underscore to differentiate
them from local variables.

Foo(
    x_ Int;
    y_ Int;
);

- calling class functions of class variables.

f Foo;
s = f.sum();

- constant initialization of class variables.

Foo (
    x Int = 0;
    y Int = 0;
);

- expression initialization of anonymous classes.

foo(
    x Int = cos(pi),
    y Int = sin(pi)
) Int;

- initialize class variables by initializer list.
note: what happens when there are more fields in the class
than in the initializer list?

x(1,2) Foo;

- constructor functions are named '.' (dot).
yes this breaks the naming convention rule.

Foo..(a Int, b Int) {
    x = b;
    y = a;
};

- constructor functions have precedence over construction
by initializer list.

loc(1,2) Foo;

loc is initialized by the Foo.. constructor.
so loc.x=2 and loc.y=1.

- destructor function is named ~.
yes this breaks the naming convention rule.

Foo.~() {
    x = 0;
    y = 0;
}

- class aliases.

Yo Foo;

- inheritance

Bar Foo (
    z Int;
    w Int;
);

- multiple inheritance

Zed (
    a String;
    b String;
);

Alpha Bar Zed;

Beta Bar Zed (
    c Float;
    d Float;
);

- this is allowed and not recommended.
except possibly for api declarations.

Gamma (x Int;) (y Int;) (a String, b String) (c Double; d Double;);

- pointers and dereferencing use ^.

Foo (
    x Int;
    p^ Int; /* the type of p dereferenced is Int */
    q ^Int; /* the type of q is pointer to Int */
)
..() {
    p = ^x;  /* p is the address of x */
    p^ = 0;  /* contents of p (ie x) set to 0 */
    q = new int(0); /* allocate memory with initializer list */
}
.~() {
    delete q;
}
.sum() {
    return x + p^ + q^;
}

- arrays use square brackets

Foo (
    x[2] Int; /* array of 2 ints */
)
.stringify() {
    s0 String = x[0];
    s1 String = x[1];
    s = s0 + "," + s1;
}

- built-in types:

Int
Char
Float Double
Int8 Int16 Int32 Int64
Float32 Float128 etc

- standard library types

Vector
String

- memory allocation

x = new Int[100];
f = new Foo(-1,+1);
x[0] = f^.x;
x[1] = f^.y;
x[2] = f^.sum();
delete f;
delete x;

- type casting is construction.
note: you may not declare a named class in an expression.

x Int = 0;
y = 1.0;
y = Float(x);

- virtual functions

Foo.cross() virtual {
    return x * y;
}

Bar Foo;
Bar.cross() override {
    return x*x + y*y;
}

Bar b;
cross_default = b.cross();
cross_bar = b.Bar.cross();
cross_foo = b.Foo.cross();


- template clases.
for example, the auto delete pointer class.
this is a work in progress.
note the type of p cannot be strongly inferred at the scope of the class.
it's therefore a template.
the type is strongly inferred when an AutoPtr object is constructed.

AutoPtr (
    p^ = nullptr;
)
.~() {
    delete p;
}
.^() {
    return p;
}

f AutoPtr(new Foo);
s = f^.sum();


- efficient compiling and linking.
this is a work in progress.
suppose the Vector template is used often in a large project.
100s of source files #include Vector.h.
they all create vectors of Int.
we don't want to compile 100s of copies of the exact same code.
we want the compiler to compile this header file once.
so the first time the compiler compiles code that #include Vector.hh...
the compiler parses it to extract syntax.
the first time the compiler instantiates an object of type Vector Int...
it compiles Vector.hh for Int and stores that object code in its memory
and saves it on disk.
the second time it #includes Vector.hh it either skips it entirely...
or loads the pre-parsed data.
the second time it instantiates an object of type Vector Int...
it links to the already existing object code.
c++ would recompile Vector.h every single time it's #included.
and discard N-1 identical copies. blech!

Vector (
    size Int = 0;
    capacity Int = 0;
    p^ = nullptr;
)
.~() {
    delete p;
}
.[](x Int) {
    return p[x];
}
.size() {
    return size;
}
.reserve(x Int)
.resize(x Int)
.clear();

- note in the above Vector class...
v[x] returns the the object in v at location x.
which is weird.
and probably wrong.
cause in this case:

    v Vector Int;
    v[0] = 1;

we want v[0] to be assigned the value 1.
so v[0] is an lvalue. (i think).
however, in this case..

    y = v[0];

we want y to be assigned the value stored at v[0].
now it's an rvalue?

so...
i think the access operator [] should return the address of the element.

.[](x Int) {
    return ^p[x];
}

and the compiler should figure out from context to fetch or store.

so

    x[10] Int;
    x[0] = 1; /* means store 1 at x+0 */
    y = x[2]; /* means fetch value at x+2 */

which i guess i no different from the . operator.

    f Foo;
    f.x = 0; /* means store 0 at f.x */
    a = f.y; /* means fetch value at f.y */


- private implemenation of a class is completely hidden.
only the api is visible.
this is a work in progress.

/** foo.imp **/
impl Foo (
    x Int;
) readonly (
    y Int;
) private (
    z Int;
) public;

/** foo.clunc **/
#include "foo.imp"
Foo:sum Int {
    return x + y + z;
}

/** foo.api generated from foo.imp **/
api Foo (
x Int readonly;
y Int;
)

/** main.clunc **/
#include "foo.api"

main Int {
    f Foo;
    s = f.sum()
}

the compiler does not know the size of Foo.
which means the linker must fill it in.


- "templates"

/* declaration */
sum auto (x auto, y auto);
sum(x, y)

/* implementation */
sum auto ( x auto; y auto; ) {
    return x + y;
}

/* specialization */
sum Int ( x Int; y Int; ) {
    return x + y;
}
