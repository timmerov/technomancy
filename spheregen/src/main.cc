/*
Copyright (C) 2012-2016 tim cotter. All rights reserved.
*/

/**
generate a sphere obj file.
divide a cube into a specified array of squares.
project each new vertex to the surface of the sphere.

i've chose to order the six faces thusly:
y is up: +z, +x, -z
z is up: +y, -x, -y
for the model it doesn't really matter.
but this "baseball" configuration means the first three
faces are contiguous in texture space.
i'm imagining they are the top row of a 3x2 texture.
the last three faces are similarly contiguous.

we don't divide the cube edge evenly.
the points get projected out to the surface of the sphere.
faces near the middle of the edge will stretch more.
noticably more.
so divide the edge into segments of equal angle.

we divide each cube side into a number of quads.
we subdivide the quads into two triangles.
we have a choice.
the new edge can point towards the center of the cube side.
or it can be perpendicular.
the perpendicular case makes the sphere not round.
so when writing faces we must be careful to choose correctly.
the quad is a bit squished.
the perpendicular axis is longer (and hence lower) than
the parallel axis.

to do...
- texture coordinates.
- normals?
- re-use edge vertexes.
**/

#include <aggiornamento/aggiornamento.h>
#include <aggiornamento/cmd_line.h>
#include <aggiornamento/log.h>
#include <common/sphere.h>

#include <fstream>


namespace {
    const int kDefaultNumSegments = 3;
    const char kDefaultFilename[] = "sphere.obj";

    class SphereGen {
    public:
        SphereGen() = default;
        ~SphereGen() throw() {
            destruct();
        }

        void destruct() throw() {
            file_.close();
        }

        int num_segments_ = kDefaultNumSegments;
        const char *filename_ = kDefaultFilename;
        std::fstream file_;
        sphere::Sphere sphere_;
        sphere::Gen gen_;

        bool parseOptions(
            int argc,
            char *argv[]
        ) throw() {
            bool result = true;

            agm::CmdLineOptions::LongFormat cmd_line_options[] = {
                {"help",         '?'},
                {"num-segments", 'n'},
                {"output-file",  'o'},
                {nullptr, 0}
            };
            agm::CmdLineOptions clo(argc, argv, "?n:o:", cmd_line_options);
            while (clo.get()) {
                switch (clo.option_) {
                case '?':
                    showHelp();
                    break;

                case 'n':
                    num_segments_ = std::atoi(clo.value_);
                    break;

                case 'o':
                    filename_ = clo.value_;
                    break;
                }
            }
            if (clo.error_) {
                result = false;
            }

            LOG("num_segments=" << num_segments_);
            LOG("output filename=\"" << filename_ << "\"");

            return result;
        }

        void showHelp() throw() {
            LOG("Usage: spheregen [options]");
            LOG("  --help         -?  show this message");
            LOG("  --num-segments -n  subdivisions per side");
            LOG("  --output-file  -o  output file");
        }

        void generate() throw() {
            destruct();

            gen_.generate(num_segments_, &sphere_);
        }

        void write() throw() {
            file_.open(filename_, std::fstream::out);
            writeHeader();
            writeVertexes();
            writeAllTextures();
            writeFaces();
            file_.close();
        }

        void writeHeader() throw() {
            file_ << "# generated by spheregen" << std::endl;
            file_ << "# https://github.com/timmerov/technomancy" << std::endl;
            file_ << std::endl;
            file_ << "g sphere" << std::endl;
            file_ << std::endl;
        }

        void writeVertexes() throw() {
            auto v = &sphere_.vertex_[0];
            for (int i = 0; i < sphere_.num_vertexes_; ++i, ++v) {
                file_ << "v " << v->x_ << " " << v->y_ << " " << v->z_ << std::endl;
            }
            file_ << std::endl;
        }

        void writeAllTextures() throw() {
            for (int side = 0; side < 6; ++side) {
                writeTextures(side);
            }
            file_ << std::endl;
        }

        void writeTextures(
            int side
        ) throw() {
            auto fx = double(side % 3) / 3.0;
            auto fy = double(side / 3) / 2.0;

            auto ins = 1.0 / double(num_segments_);
            for (int y = 0; y <= num_segments_; ++y) {
                auto v = fy + 1.0/2.0 * y * ins;
                for (int x = 0; x <= num_segments_; ++x) {
                    auto u = fx + 1.0/3.0 * x * ins;
                    file_ << "vt " << u << " " << v << std::endl;
                }
            }
        }

        void writeFaces() throw() {
            auto f = sphere_.face_;
            for (int i = 0; i < sphere_.num_faces_; ++i) {
                file_ << "f "
                    << f->a_ << "/" << f->a_ << " "
                    << f->b_ << "/" << f->b_ << " "
                    << f->c_ << "/" << f->c_ << std::endl;
                ++f;
            }
        }
    };
}

int main(
    int argc, char *argv[]
) throw() {
    agm::log::init(AGM_TARGET_NAME ".log");

    SphereGen sphere;
    auto good = sphere.parseOptions(argc, argv);
    if (good) {
        sphere.generate();
        sphere.write();
    }

    return 0;
}
